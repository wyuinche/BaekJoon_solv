# def printKey(key, m):
#     for i in range(m):
#         print(key[i])

def makeMap(lock, n, m):
    lockMap = [[0] * (2 * n + m - 2) for _ in range(2 * n + m - 2)]
    for i in range(m-1, n+m-1):
        for j in range(m-1, n+m-1):
            lockMap[i][j] = lock[i - m + 1][j - m + 1]
    return lockMap
    


def spin(k, m):
    key = [[0] * m for _ in range(m)]
    for i in range(m):
        for j in range(m):
            key[j][m - i - 1] = k[i][j]
    return key


def isOpen(lock, key, n, m):
    for i in range(n + m - 1):
        for j in range(n + m - 1):
            if check(lock, key, n, m, i, j):
                return True
    return False


def check(lock, key, n, m, si, sj):
    for i in range(m-1, m+n-1):
        for j in range(m-1, m+n-1):
            if i < si or j < sj or i > si + m - 1 or j > sj + m - 1:
                if lock[i][j] == 0:
                    return False
                else:
                    continue
            else:
                if lock[i][j] ^ key[i - si][j - sj] == 0:
                    return False
                else:
                    continue
    return True


def solution(key, lock):
    answer = False
    n, m = len(lock), len(key)

    lockSum = 0
    keySum = 0
    for lo in lock:
        lockSum += sum(lo)
    for ke in key:
        keySum += sum(ke)
        
    if keySum < n * n - lockSum:
        return False
    elif lockSum == n * n:
        return True
    elif n * n - lockSum == 1 and keySum != 0:
        return True
    
    lock = makeMap(lock, n, m)
    
    for i in range(4):
        if i != 0:
            key = spin(key, m)
        if isOpen(lock, key, n, m):
            return True

    return False
